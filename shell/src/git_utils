#!/usr/bin/env bash

git_restore='git restore';
git_restore_f='git restore .';
git_switch='git switch';
git_switch_c='git switch -C';

# - Get the git version
#       $(eval "git --version") ➡️  git version 2.25.0
# - Extract the first pair of numbers with a regular expression
#       =~ ([0-9]{1}.[0-9]{2}) ➡️  2.25
git_version=$(echo_regex_substring "`git --version`" "([0-9]{1}.[0-9]{2})");

# - Remove the decimal separator   | tr -d . ➡️  225
# - Check if the extracted number is lower than 223
if [[ $(eval 'echo "$git_version" | tr -d .') -lt 223 ]]; then
  git_restore='git checkout';
  git_restore_f='git checkout -f';
  git_switch='git checkout';
  git_switch_c='git checkout -B';
fi

# Checks if a branch exists.
#     $1: Branch name
__branch_exists() {
  local source=`color_magenta "$2"`;
  local branch=`color_cyan $3`;
  print_info "Verifying if branch $branch exists $source";
  run_cmd "$1" "result";
  [ -z "$result" ] && { 
    print_warning "Branch $branch doesn't exist $source.";
    return 1;
  }
  return 0;
}

# Checks if a branch on remote exists.
#     $1: Branch name
branch_locally_exists() {
  has_parameters $@ || return 1;
  __branch_exists "git show-ref refs/heads/$1" "locally" $1 || return 1;
}

# Checks if a branch locally exists.
#     $1: Branch name
branch_on_remote_exists() {
  has_parameters $@ || return 1;
  __branch_exists "git ls-remote --heads origin refs/heads/$1 | grep $1" "on remote" $1 || return 1;
}

# Gets the name of the current branch on the current directory.
# If the HEAD is detached, then gets the SHA. 
echo_current_branch() {
  cmd_exists git || return 1;
  local result=$(git branch --show-current);
  [ -z "$result" ] && result=$(git rev-parse --short HEAD);
  echo $result;
  return 0;
}

get_current_branch() {
  cmd_exists git || return 1;

  print_info "Getting current branch...";
  run_cmd "git branch --show-current" $1;

  [ -z "$1" ] && {
    print_info "Branch not available. Getting current SHA...";
    run_cmd "git rev-parse --short HEAD" $1;
    [ -z "$1" ] && return 1;
  };
  return 0;
}

get_main_branch() {
  cmd_exists git || return 1;
  print_info "Getting name of the main branch...";
  local command="git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@'";
  run_cmd "$command" $1;
}

get_latest_release_branch() {
  print_info "Getting latest Release branch..."

  # git branch -r: Get remote branches.
  # grep -E '^ *origin/Release-20*': Filter branches that starts with " origin/Release-20*".
  # sed -e 's/^ *origin\///': Removes " origin/".
  # sort -rV: Sort lines. V is alphabetic order. -r is reverse order.
  # head -n 1: Shows the first result only
  local command="git branch -r | grep -E '^ *origin/Release-20*' | sed -e 's/^ *origin\///' | sort -rV | head -n 1";

  run_cmd "$command" "$1";
}

get_api_repo_url() {
  local repo_path=$(eval "git rev-parse --show-toplevel");
  echo "https://api.github.com/repos/$(basename $(dirname "$repo_path"))/$(basename "$repo_path")";
}

# Gets the URL of the repository.
# Usage: get_repo_url [path]
# If path is provided, attempt to get the remote origin URL for that repository.
# If path is omitted, use current working directory.
# Prints normalized HTTPS URL without trailing .git.
# Returns 0 on success, 1 on failure.
get_repo_url() {
  local repo_path="$1";
  [ -z "$repo_path" ] && repo_path=".";

  # Validate path exists
  if [ ! -d "$repo_path" ]; then
    echo "Path does not exist: $repo_path";
    return 1;
  fi

  # Use git -C to run inside the provided path (safer than subshell cd)
  local url=$(git -C "$repo_path" remote get-url origin 2>/dev/null);
  if [ -z "$url" ]; then
    echo "Not a git repository or no remote origin: $repo_path";
    return 1;
  fi

  # Convert SSH URL (git@host:owner/repo.git) to HTTPS (https://host/owner/repo.git)
  if [[ $url == git@* ]]; then
    url=${url/git@/https://};
    url=${url/:/\/};
  fi

  # Convert scp-like SSH URL without git@ prefix (e.g., user@host:owner/repo.git)
  if [[ $url =~ ^[A-Za-z0-9._-]+@[A-Za-z0-9._-]+:.*$ ]]; then
    local host_part=$(echo "$url" | cut -d':' -f1 | cut -d'@' -f2);
    local path_part=$(echo "$url" | cut -d':' -f2-);
    url="https://$host_part/$path_part";
  fi

  # Remove .git suffix if present
  url="${url%.git}";

  echo "$url";
  return 0;
}
