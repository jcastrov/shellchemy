#!/usr/bin/env bash

# Adds files and shows a quick status
gita() {
  has_parameters $@ || return 1;
  run_cmd "git add $@";
  run_cmd "git status -s"
}
gitaf() { gita "--force $@"; }

# Deletes a branch locally
gitbD() {
  local current_branch=$(echo_current_branch);
  local branch_to_delete=$1;
  [[ $# == 0 ]] && branch_to_delete=$current_branch;
  branch_locally_exists $branch_to_delete || return 1;
  question "Are you sure to force delete `color_red $branch_to_delete` branch locally?"
  [ $? != 0 ] && return 0;

  if [[ $current_branch == $branch_to_delete ]]; then
    get_main_branch "main_branch";
    print_info "Switching to `color_cyan $main_branch` branch";
    run_cmd "$git_switch $main_branch";
  fi
  print_ok "Deleting branch `color_red $branch_to_delete` branch..."
  run_cmd "git branch -D $branch_to_delete";
}

# Gets the list of branches created in remote
#    $@: Additional parameters
gitbl() {
  run_cmd "git for-each-ref --sort=authorname --format='%(committerdate) %09 %(authorname) %09 %(refname)' refs/remotes $@"
}

# Renames a branch
#    $@: Branch name and additional parameters
gitbm() { run_cmd "git branch -m $@"; }

# Commits your changes
#    $1: Summary.
#    $2 (optional): Description.
gitc() {
  has_parameters $@ || return 1;
  local current_branch=$(echo_current_branch);
  print_info "Committing your changes.";
  run_cmd "git commit -m \"$current_branch: $1\" $2";
}
gitca() { gitc "$1" "--amend"; }

gitchk() { run_cmd "git checkout $@"; }

# Cherry pick commands
gitchp() { run_cmd "git cherry-pick "$@""; }
gitchpa() { run_cmd "git cherry-pick --abort"; }
gitchpc() { run_cmd "git cherry-pick --continue"; }

# Fetches branches
gitf() { 
  print_info "Downloading objects and refs from origin..."
  run_cmd "git fetch -p";
}

# Merge commands
gitm() { run_cmd "git merge $1 --no-edit"; }

gitma() {
  run_cmd "git merge --abort";
  # If the current branch ends with -qa, -develop or -staging,
  # ask if they want to switch back to the original branch.
  local current_sync_branch=$(echo_current_branch);
  if [[ $current_sync_branch =~ -(qa|develop|dev|staging)$ ]]; then
    local original_branch="${current_sync_branch%-*}";
    question "Do you want to switch back to $(color_cyan $original_branch) branch?";
    [[ $? == 0 ]] && { 
      run_cmd "$git_switch $original_branch";
      question "Do you want to delete `color_red $current_sync_branch` branch locally?"
      [[ $? == 0 ]] && { run_cmd "git branch -D $current_sync_branch";  }
    }
  fi
}

gitmc() { run_cmd "git merge --continue"; }
gitmo() { run_cmd "git merge $2 origin/$1 --no-edit"; }

# Opens remote on the browser with the current branch or a specific one ($1),
# optionally opening a specific file ($2).
#     $1 (optional): Branch name
#     $2 (optional): Relative path of the file
gito() {
  is_git_directory && local branch=$1 || return 1;
  [ -z "$1" ] && get_current_branch branch;
  [ -n "$2" ] && { gitof $2 $1; return 0; }
  print_info "Opening `color_cyan $branch` on remote...";
  run_cmd "open `get_repo_url`/tree/$branch";
}

# Opens a specific file on remote for the current branch. If $2 is specified,
# $2 will be the selected branch.
#     $1: Relative path of the file
#     $2 (Optional): Branch name 
gitof() {
  is_git_directory && has_parameters $@ && local branch=$2 || return 1;
  [ -z "$2" ] && get_current_branch branch;
  print_info "Opening file in `color_cyan $branch` on remote...";
  run_cmd "open `get_repo_url`/blob/$branch/$1";
}

# Pull commands
gitpl() { run_cmd "git pull"; }
gitplr() { run_cmd "git pull -r"; }

# Pushes a branch
gitps() { 
  run_cmd "git push $@";
  [ $? != 0 ] && { return $?; }
  local current_branch=$(echo_current_branch);

  # If the branch ends with "-develop", "-qa" or "-staging"
  if [[ $current_branch =~ -(develop|dev|qa|staging)$ ]]; then
    ##*- Remove the branch name. ABC-123-qa -> qa
    local base_branch="${current_branch##*-}";
  
    # %-* Remove the suffix. ABC-123-qa -> ABC-123
    local target_branch="${current_branch%-*}";

    question "Do you want to create a Pull Request (head: $(color_cyan $current_branch). base: $(color_magenta $base_branch))?";
    [[ $? == 0 ]] && { run_cmd "ghprc $base_branch"; }

    question "Do you want to switch back to $(color_cyan $target_branch) branch?";
    [[ $? == 0 ]] && { run_cmd "$git_switch $target_branch"; }
  fi
}

# Deletes a branch on remote.
#     $1: Branch name
gitpsd() {
  is_git_directory || return 1;
  local branch_to_delete=$1;
  [[ $# == 0 ]] && branch_to_delete=$(echo_current_branch);
  branch_on_remote_exists $branch_to_delete && {
    question "Do you want to delete `color_red $branch_to_delete` `color_yellow "on remote"`?";
    [[ $? == 0 ]] && { 
      run_cmd "git push origin --delete $branch_to_delete $@";
      run_cmd "git branch --unset-upstream $branch_to_delete";
    }
  }
}

# Pushes a branch forcefully
gitpsf() { gitps "--force-with-lease $@"; }
gitpsfnv() { gitpsf "--no-verify $@"; }

# Pushes a branch forcefully fixing the upstream
gitpsfu() { gitpsu "--force-with-lease $@"; }
gitpsfunv() { gitpsfu "--no-verify $@"; }

# Renames the current branch locally and on remote.
#     $1: New branch name
gitpsm() {
  is_git_directory || return 1;
  get_current_branch current_branch;
  branch_on_remote_exists $current_branch || return 1;
  question "Are you sure to change the name from `color_red $current_branch` to `color_green $1`?"
  [ $? != 0 ] && return 0;
  run_cmd "git branch -m $@" &&
  run_cmd "git push origin :$current_branch $@" &&
  run_cmd "git push origin --set-upstream $@";
}

gitpsnv() { gitps "--no-verify $@"; }

# Pushes a branch for the first time
gitpsu() { gitps "--set-upstream origin $(echo_current_branch) $@"; }
gitpsunv() { gitpsu "--no-verify $@"; }

# Rebase commands
gitrb() { run_cmd "git rebase $@"; }
gitrbm() { gitrb origin/master; }
gitrba() { gitrb --abort; }
gitrbc() { gitrb --continue; }
gitrbi() { gitrb "-i $@"; }
gitrbih() { gitrbi HEAD~$1; }
gitrbio() { gitrbi origin/$1; }
gitrbq() { gitrb --quit; }
gitrbs() { gitrb --skip; }

# Reset commands
gitrsm() { run_cmd "git reset --merge"; }
gitrs() { run_cmd "git reset $@"; }
gitrsh() { run_cmd "git reset --hard $1"; }
gitrsho() { run_cmd "git reset --hard origin/$1"; }

# Restore command
gitrt() {
  [[ $1 != "." ]] && run_cmd "$git_restore $@" && return 0;
  question "Are you sure to restore all your modified files?"
  [[ $? == 0 ]] && run_cmd "$git_restore_f";
}

# Revert command
gitrv() { run_cmd "git revert $@"; }

# Status commands
gits() { run_cmd "git status"; }
gitss() { run_cmd "git status -s"; }

# Stash commands
gitsh() { run_cmd "git stash $@"; }
gitsha() { run_cmd "git stash apply"; }
gitshas() { run_cmd "git stash apply stash@{\"$1\"}"; }
gitshcl() { run_cmd "git stash clear"; }
gitshiu() { run_cmd "git stash --include-untracked"; }
gitshl() { run_cmd "git stash list"; }
gitshp() { run_cmd "git stash pop"; }
gitshps() { run_cmd "git stash save \"$1\""; }
gitshu() { run_cmd "git stash --include-untracked \"$1\""; }

# Switches or creates a branch from the current branch. Branch $1 will be
# created from $2 instead, if $2 is specified and $1 doesn't exist.
#     $1: Branch to switch or create
#     $2 (Optional): Branch or SHA starting point
gitsw() {
  has_parameters $@ || return 1;
  [[ "$1" == "-" ]] && {
    run_cmd "$git_switch -";
    return 0;
  }

  local start_point=$2;
  if [ -z "$2" ]; then
    start_point=$(echo_current_branch);
    branch_locally_exists $1 && { run_cmd "$git_switch $1"; return 0; }
  fi

  local on_remote=false;
  branch_on_remote_exists $1 && {
    on_remote=true;
    question "Do you want to switch to `color_yellow $1` remote branch?";
    [[ $? == 0 ]] && {
      gitf;
      run_cmd "$git_switch $1";
      return 0;
    }
  }

  if [[ $start_point =~ ^origin/ ]]; then
    ! branch_on_remote_exists ${2#"origin/"} && return 1;
  else
    question "Do you want to create `color_green $1` branch from local $(color_red $start_point)?";
    [[ $? == 0 ]] && {
      $on_remote && gitpsd $1;
      run_cmd "$git_switch_c $1 $start_point";
      return 0;
    };
    start_point="origin/$start_point";
  fi

  question "Do you want to create `color_green $1` branch from remote $(color_cyan $start_point)?";
  [[ $? == 0 ]] && {
    $on_remote && gitpsd $1;
    gitf;
    run_cmd "$git_switch_c $1 $start_point";
  }
  
  return 0;
}
gitswC() { run_cmd "git switch -C $@"; }

gitsync() {
  local current_branch=$(echo_current_branch);
  local target_branch=$1;

  # Sync should not be done from qa, develop or staging branches.
  if [[ $current_branch =~ ^(qa|develop|dev|staging)$ ]]; then
    print_error "Current branch cannot be `color_cyan $current_branch`"; return 1;
  fi

  # If the current branch ends with -qa, -develop or -staging, asks if they want to continue.
  if [[ $current_branch =~ -(qa|develop|dev|staging)$ ]]; then
    question "Looks like you are in a sync branch. Do you want to continue with `color_cyan $current_branch` branch?";

    # If the user doesn't want to continue, asks if they want to continue from the branch without the suffix.
    [[ $? != 0 ]] && {
      question "Do you want to continue from `color_cyan ${current_branch%-*}` branch instead?";
      [[ $? != 0 ]] && return 1;

      # Remove the suffix.
      current_branch="${current_branch%-*}";
    }
  fi

  # Get the latest Release branch if the parameter is "Release"
  if [[ $1 == "Release" ]]; then
    get_latest_release_branch "target_branch";
  fi

  # If branch on remote doesn't exist, stop execution. 
  ! branch_on_remote_exists $target_branch && return 1;

  # Fetch remote branches.
  gitf;

  local sync_branch=${current_branch}-${target_branch};
  local switch_cmd="$git_switch_c $sync_branch origin/$target_branch";
  get_main_branch "main_branch";
  
  if [[ $2 == "cherry-pick" ]]; then
    local base_branch="main";
    local cherrypicked_branch="${current_branch}-cherrypicked";
    run_cmd "$git_switch_c $cherrypicked_branch origin/main";
    run_cmd "git cherry-pick $(git merge-base OMEDIA-1749 main)..$current_branch";
    current_branch=$cherrypicked_branch;
  fi

  # Verify whether the sync branch exists or needs to be recreated.
  if branch_on_remote_exists $sync_branch && branch_locally_exists $sync_branch; then
    question "Do you want to update the current `color_cyan $sync_branch` branch?";
    [[ $? == 0 ]] && { switch_cmd="$git_switch $sync_branch"; }
  fi
  run_cmd "$switch_cmd";

  question "Do you want to merge `color_cyan $sync_branch` branch with the main branch using \"ours\" strategy?";
  [[ $? == 0 ]] && {
    gitmo $main_branch "-s ours"; 
    if [[ $current_branch == $main_branch ]]; then
      return 0;
    fi
  }

  gitm $current_branch;
}

gitsyncchp() {
  gitsync $1 "cherry-pick";
}

# Checks if the current directory or a specific one is inside a Git repostory.
#     $1 (optional): Directory path to validate
is_git_directory() {
  (cd ${1:-.}; [[ $(eval "git rev-parse --is-inside-work-tree") == "true" ]] && return 0 || return 1);
  return $?;
}
