#!/usr/bin/env bash

# Detect Zsh mode safely
IS_ZSH=false
[ -n "$ZSH_VERSION" ] && IS_ZSH=true

# Portable tput color wrapper
__shellchemy_color() { printf "%s" "$(tput "$3" "${2:-7}")${1}$(tput sgr0)"; }

# ========== Bash Color Helpers ==========
color_black()   { __shellchemy_color "$1" 0 setaf; }
color_red()     { __shellchemy_color "$1" 1 setaf; }
color_green()   { __shellchemy_color "$1" 2 setaf; }
color_yellow()  { __shellchemy_color "$1" 3 setaf; }
color_blue()    { __shellchemy_color "$1" 4 setaf; }
color_magenta() { __shellchemy_color "$1" 5 setaf; }
color_cyan()    { __shellchemy_color "$1" 6 setaf; }
color_gray()    { __shellchemy_color "$1" 7 setaf; }

bg_black()      { __shellchemy_color "$1" 0 setab; }
bg_red()        { __shellchemy_color "$1" 1 setab; }
bg_green()      { __shellchemy_color "$1" 2 setab; }
bg_yellow()     { __shellchemy_color "$1" 3 setab; }
bg_blue()       { __shellchemy_color "$1" 4 setab; }
bg_magenta()    { __shellchemy_color "$1" 5 setab; }
bg_cyan()       { __shellchemy_color "$1" 6 setab; }
bg_white()      { __shellchemy_color "$1" 7 setab; }

# Prompt-friendly wrappers (for PS1)
prompt_fg() { echo "\[$(tput setaf "$1")\]${2}\[$(tput sgr0)\]"; }
prompt_bg() { echo "\[$(tput setab "$1")\]${2}\[$(tput sgr0)\]"; }

prompt_fg_black()   { prompt_fg 0 "$@"; }
prompt_fg_red()     { prompt_fg 1 "$@"; }
prompt_fg_green()   { prompt_fg 2 "$@"; }
prompt_fg_yellow()  { prompt_fg 3 "$@"; }
prompt_fg_blue()    { prompt_fg 4 "$@"; }
prompt_fg_magenta() { prompt_fg 5 "$@"; }
prompt_fg_cyan()    { prompt_fg 6 "$@"; }
prompt_fg_gray()    { prompt_fg 7 "$@"; }

prompt_bg_black()   { prompt_bg 0 "$@"; }
prompt_bg_red()     { prompt_bg 1 "$@"; }
prompt_bg_green()   { prompt_bg 2 "$@"; }
prompt_bg_yellow()  { prompt_bg 3 "$@"; }
prompt_bg_blue()    { prompt_bg 4 "$@"; }
prompt_bg_magenta() { prompt_bg 5 "$@"; }
prompt_bg_cyan()    { prompt_bg 6 "$@"; }
prompt_bg_white()   { prompt_bg 7 "$@"; }

# Printing utilities
print_format()  { printf "%s\n" "$@"; }
print_error()   { printf "%s %s\n" "$(color_red ▒)" "$@"; }
print_info()    { printf "%s %s\n" "$(color_blue ▒)" "$@"; }
print_ok()      { printf "%s %s\n" "$(color_green ▒)" "$@"; }
print_warning() { printf "%s %s\n" "$(color_yellow ▒)" "$@"; }
print_cmd()     { printf "\033[1;30m▒ $ %s%s\n" "$(echo "$@" | awk '$1=$1')" "$(tput sgr0)"; }

# ========== Zsh Overrides ==========
if $IS_ZSH; then
  color_black()   { print -P "%F{black}$1%f"; }
  color_red()     { print -P "%F{red}$1%f"; }
  color_green()   { print -P "%F{green}$1%f"; }
  color_yellow()  { print -P "%F{yellow}$1%f"; }
  color_blue()    { print -P "%F{blue}$1%f"; }
  color_magenta() { print -P "%F{magenta}$1%f"; }
  color_cyan()    { print -P "%F{cyan}$1%f"; }
  color_gray()    { print -P "%F{8}$1%f"; }

  bg_black()      { print -P "%K{black}$1%k"; }
  bg_red()        { print -P "%K{red}$1%k"; }
  bg_green()      { print -P "%K{green}$1%k"; }
  bg_yellow()     { print -P "%K{yellow}$1%k"; }
  bg_blue()       { print -P "%K{blue}$1%k"; }
  bg_magenta()    { print -P "%K{magenta}$1%k"; }
  bg_cyan()       { print -P "%K{cyan}$1%k"; }
  bg_white()      { print -P "%K{white}$1%k"; }

  underline()     { print -P "%U${1}%u"; }

  print_format()  { print -P "$@\n"; }
  print_error()   { print -P "$(color_red ▒) $@"; }
  print_info()    { print -P "$(color_blue ▒) $@"; }
  print_ok()      { print -P "$(color_green ▒) $@"; }
  print_warning() { print -P "$(color_yellow ▒) $@"; }
  print_cmd()     { print -P "$(color_gray "  $ $(echo "$@" | awk '$1=$1')")"; }
fi

# ========== Interactive Questions ==========
__question() {
  local color_func="$1"; shift
  local question_string="$($color_func ▒) $1 [y/$(color_cyan N)] "

  if $IS_ZSH; then
    local response
    print -nP "$question_string"
    read response
  else
    read -r -p "$question_string" response
  fi

  [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]
}

question()          { __question color_magenta "$@"; }
question_warning()  { __question color_yellow "$@"; }
